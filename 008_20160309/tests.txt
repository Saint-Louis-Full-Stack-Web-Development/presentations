01. StupidTest #1 (8)

/srv/www/phpUnitTutorial/Test/StupidTest.php

<?php

namespace phpUnitTutorial\Test;

class StupidTest extends \PHPUnit_Framework_TestCase
{

  public function testTrueIsTrue()
  {
    $foo = true;
    $this->assertTrue($foo);
  }

}

------

/project/root/

$ vendor/bin/phpunit	1 PASS ... 0 FAIL

##############################################################

02. StupidTest #2 (12)

/srv/www/phpUnitTutorial/Test/StupidTest.php

<?php

namespace phpUnitTutorial\Test;

class StupidTest extends \PHPUnit_Framework_TestCase
{

  /*
  public function testTrueIsTrue()
  {
    $foo = true;
    $this-assertTrue($foo);
  }
  */

  public function testTrueIsTrue()
  {
    $foo = false;
    $this->assertTrue($foo);
  }

  public function testTrueIsFalse()
  {
    $foo = false;
    $this->assertFalse($foo);
  }

}

------

/project/root/

$ vendor/bin/phpunit	1 PASS ... 1 FAIL << testTrueIsTrue() >>

##############################################################

03. URLTest.php #1 (14-15)

/srv/www/phpUnitTutorial/URL.php

<?php

namespace phpUnitTutorial;

class URL
{
    public function sluggify($string, $separator = '-', $maxLength = 96)
    {
        $title = iconv('UTF-8', 'ASCII//TRANSLIT', $string);
        $title = preg_replace("%[^-/+|\w ]%", '', $title);
        $title = strtolower(trim(substr($title, 0, $maxLength), '-'));
        $title = preg_replace("/[\/_|+ -]+/", $separator, $title);

        return $title;
    }
}

-----------------

/srv/www/phpUnitTutorial/Test/URLTest.php

<?php

namespace phpUnitTutorial\Test;

class URLTest extends \PHPUnit_Framework_TestCase
{
    //
}


------

/project/root/

$ vendor/bin/phpunit	0 PASS ... 1 FAIL << No Tests Created >>

##############################################################

04. URLTest.php #2 (16)

/srv/www/phpUnitTutorial/Test/URLTest.php

<?php

namespace phpUnitTutorial\Test;

class URLTest extends \PHPUnit_Framework_TestCase
{
    public function testSluggifyReturnsSluggifiedString()
    {
        //
    }
}

------

/project/root/

$ vendor/bin/phpunit	1 PASS ... 0 FAIL

##############################################################

05. URLTest.php #3 (19)

/srv/www/phpUnitTutorial/Test/URLTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/URL.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\URL;

class URLTest extends \PHPUnit_Framework_TestCase
{
    public function testSluggifyReturnsSluggifiedString()
    {
        $originalString = 'This string will be sluggified';
        $expectedResult = 'this-string-will-be-sluggified';

        $url = new URL();

        $result = $url->sluggify($originalString);

        $this->assertEquals($expectedResult, $result);
    }
}

------

/project/root/

$ vendor/bin/phpunit	1 PASS ... 0 FAIL

##############################################################

06. URLTest.php #4 (20-22) => Test Suites

/srv/www/phpUnitTutorial/Test/URLTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/URL.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\URL;

class URLTest extends \PHPUnit_Framework_TestCase
{
    public function testSluggifyReturnsSluggifiedString()
    {
        $originalString = 'This string will be sluggified';
        $expectedResult = 'this-string-will-be-sluggified';

        $url = new URL();

        $result = $url->sluggify($originalString);

        $this->assertEquals($expectedResult, $result);
    }

    public function testSluggifyReturnsExpectedForStringsContainingNumbers()
    {
        $originalString = 'This1 string2 will3 be 44 sluggified10';
        $expectedResult = 'this1-string2-will3-be-44-sluggified10';

        $url = new URL();

        $result = $url->sluggify($originalString);

        $this->assertEquals($expectedResult, $result);
    }

    public function testSluggifyReturnsExpectedForStringsContainingSpecialCharacters()
    {
        $originalString = 'This! @string#$ %$will ()be "sluggified';
        $expectedResult = 'this-string-will-be-sluggified';

        $url = new URL();

        $result = $url->sluggify($originalString);

        $this->assertEquals($expectedResult, $result);
    }

    public function testSluggifyReturnsExpectedForStringsContainingNonEnglishCharacters()
    {
        $originalString = "Tänk efter nu – förr'n vi föser dig bort";
        $expectedResult = 'tank-efter-nu-forrn-vi-foser-dig-bort';

        $url = new URL();

        $result = $url->sluggify($originalString);

        $this->assertEquals($expectedResult, $result);
    }

    public function testSluggifyReturnsExpectedForEmptyStrings()
    {
        $originalString = '';
        $expectedResult = '';

        $url = new URL();

        $result = $url->sluggify($originalString);

        $this->assertEquals($expectedResult, $result);
    }
}

------

/project/root/

$ vendor/bin/phpunit	5 PASS ... 0 FAIL

##############################################################

07. URLTest.php #5 (26-27) => DataProviders + Annotations = No Duplication

/srv/www/phpUnitTutorial/Test/URLTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/URL.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\URL;

class URLTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @param string $originalString String to be sluggified
     * @param string $expectedResult What we expect our slug result to be
     *
     * @dataProvider providerTestSluggifyReturnsSluggifiedString
     */
    public function testSluggifyReturnsSluggifiedString($originalString, $expectedResult)
    {
        $url = new URL();

        $result = $url->sluggify($originalString);

        $this->assertEquals($expectedResult, $result);
    }

    public function providerTestSluggifyReturnsSluggifiedString()
    {
        return array(
            array('This string will be sluggified', 'this-string-will-be-sluggified'),
            array('THIS STRING WILL BE SLUGGIFIED', 'this-string-will-be-sluggified'),
            array('This1 string2 will3 be 44 sluggified10', 'this1-string2-will3-be-44-sluggified10'),
            array('This! @string#$ %$will ()be "sluggified', 'this-string-will-be-sluggified'),
            array("Tänk efter nu – förr'n vi föser dig bort", 'tank-efter-nu-forrn-vi-foser-dig-bort'),
            array('', ''),
        );
    }
}

------

/project/root/

$ vendor/bin/phpunit	6 PASS ... 0 FAIL

##############################################################

08. UserTest.php #1 (30-31) => More Realistic Test; Protected and Private Method Testing

/srv/www/phpUnitTutorial/User.php

<?php

namespace phpUnitTutorial;

class User
{
    const MIN_PASS_LENGTH = 4;

    private $user = array();

    public function __construct(array $user)
    {
        $this->user = $user;
    }

    public function getUser()
    {
        return $this->user;
    }

    public function setPassword($password)
    {
        if (strlen($password) < self::MIN_PASS_LENGTH) {
            return false;
        }

        $this->user['password'] = $this->cryptPassword($password);

        return true;
    }

    private function cryptPassword($password)
    {
        return md5($password);
    }
}

-----------------

/srv/www/phpUnitTutorial/Test/UserTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/User.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\User;

class UserTest extends \PHPUnit_Framework_TestCase
{
    //
}

------

/project/root/

$ vendor/bin/phpunit	0 PASS ... 1 FAIL << No Tests Created >>

##############################################################

09. UserTest.php #2 (33-34)

/srv/www/phpUnitTutorial/Test/UserTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/User.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\User;


class UserTest extends \PHPUnit_Framework_TestCase
{
    public function testSetPasswordReturnsTrueWhenPasswordSuccessfullySet()
    {
    	$details = array();
    	$user = new User($details);
    	$password = 'fubar';
    	$result = $user->setPassword($password);
    	$this->assertTrue($result);
    }
}

-----

/project/root/

$ vendor/bin/phpunit	1 PASS ... 0 FAIL

##############################################################

10. UserTest.php #3 (35-36)

/srv/www/phpUnitTutorial/Test/UserTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/User.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\User;

class UserTest extends \PHPUnit_Framework_TestCase
{
    public function testSetPasswordReturnsTrueWhenPasswordSuccessfullySet()
    {
    	$details = array();
    	$user = new User($details);
    	$password = 'fubar';
    	$result = $user->setPassword($password);
    	$this->assertTrue($result);
    }

    public function testGetUserReturnsUserWithExpectedValues()
    {
    	$details = array();
    	$user = new User($details);
    	$password = 'fubar';
    	$user->setPassword($password);
    	$expectedPasswordResult = '5185e8b8fd8a71fc80545e144f91faf2';
    	$currentUser = $user->getUser();
    	$this->assertEquals($expectedPasswordResult, $currentUser['password']);
    }
}

-----

/project/root/

$ vendor/bin/phpunit	2 PASS ... 0 FAIL

##############################################################

x. 11. Generate Coverage Report (38)

/srv/www/phpUnitTutorial/

$ vendor/bin/phpunit --coverage-html coverage 
	# a "coverage" folder now contains an index.html file ... Open this up in a browser

	Click on URL.php in the report (GREEN = Executed; RED = Not Executed; YELLOW = Dead Code)
        Click on User.php in the report (IF stmt inside ::setPassword is never run)

##############################################################

12. UserTest.php #4 (41-42)

/srv/www/phpUnitTutorial/Test/UserTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/User.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\User;

class UserTest extends \PHPUnit_Framework_TestCase
{
    public function testSetPasswordReturnsTrueWhenPasswordSuccessfullySet()
    {
    	$details = array();
    	$user = new User($details);
    	$password = 'fubar';
    	$result = $user->setPassword($password);
    	$this->assertTrue($result);
    }

    public function testGetUserReturnsUserWithExpectedValues()
    {
    	$details = array();
    	$user = new User($details);
    	$password = 'fubar';
    	$user->setPassword($password);
    	$expectedPasswordResult = '5185e8b8fd8a71fc80545e144f91faf2';
    	$currentUser = $user->getUser();
    	$this->assertEquals($expectedPasswordResult, $currentUser['password']);
    }

    public function testSetPasswordReturnsFalseWhenPasswordLengthIsTooShort()
    {
    	$details = array();
    	$user = new User($details);
    	$password = 'fub';
    	$result = $user->setPassword($password);
    	$this->assertFalse($result);
    }
}

-----

/project/root/

$ vendor/bin/phpunit	3 PASS ... 0 FAIL

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

12. PaymentTest.php #1 (45-46, 46-47, 47-48)

/srv/www/phpUnitTutorial/composer.json

{{ add Authorize.Net to file }}

"authorizenet/authorizenet": "*"



-----------------


/srv/www/phpUnitTutorial/Payment.php

<?php

namespace phpUnitTutorial;

class Payment
{
    const API_ID = 123456;
    const TRANS_KEY = 'TRANSACTION KEY';

    public function processPayment(array $paymentDetails)
    {
        $transaction = new \AuthorizeNetAIM(self::API_ID, self::TRANS_KEY);
        $transaction->amount = $paymentDetails['amount'];
        $transaction->card_num = $paymentDetails['card_num'];
        $transaction->exp_date = $paymentDetails['exp_date'];

        $response = $transaction->authorizeAndCapture();

        if ($response->approved) {
            return $this->savePayment($response->transaction_id);
        } else {
            throw new \Exception($response->error_message);
        }
    }

    public function savePayment($transactionId)
    {
        // Logic for saving transaction ID to database or anywhere else would go in here
        return true;
    }
}


-----------------


/srv/www/phpUnitTutorial/Test/PaymentTest.php

<?php

namespace phpUnitTutorial\Test;

include_once('../phpUnitTutorial/Payment.php'); // must use until I figure out the USE statement below
use phpUnitTutorial\Payment;

class PaymentTest extends \PHPUnit_Framework_TestCase
{
    //
}

-----

/project/root/

$ vendor/bin/phpunit	0 PASS ... 1 FAIL << No Tests Created >>

##############################################################

13. PaymentTest.php #2 (49-50) => Dependencies!!!

/srv/www/phpUnitTutorial/Test/PaymentTest.php

<?php

namespace phpUnitTutorial\Test;

use phpUnitTutorial\Payment;

class PaymentTest extends \PHPUnit_Framework_TestCase
{
    public function testProcessPaymentReturnsTrueOnSuccessfulPayment()
    {
        $paymentDetails = array(
            'amount'   => 123.99,
            'card_num' => '4111-1111-1111-1111',
            'exp_date' => '03/2013',
        );

        $payment = new Payment();
        $result = $payment->processPayment($paymentDetails);

        $this->assertTrue($result);
    }
}

-----

/project/root/

$ vendor/bin/phpunit	0 PASS ... 1 FAIL << Dependency on Authorize.Net >>

##############################################################

14. PaymentTest.php #3 (66-67) => Mocks!!!! (Look at previous pages for interim code)

/srv/www/phpUnitTutorial/Test/PaymentTest.php

<?php

namespace phpUnitTutorial\Test;

use phpUnitTutorial\Payment;

class PaymentTest extends \PHPUnit_Framework_TestCase
{
    public function testProcessPaymentReturnsTrueOnSuccessfulPayment()
    {
        $paymentDetails = array(
            'amount'   => 123.99,
            'card_num' => '4111-1111-1111-1111',
            'exp_date' => '03/2013',
        );

        $payment = new Payment();

        $response = new \stdClass();
        $response->approved = true;
        $response->transaction_id = 123;

        $authorizeNet = $this->getMockBuilder('\AuthorizeNetAIM')
            ->setConstructorArgs(array($payment::API_ID, $payment::TRANS_KEY))
            ->getMock();

        $authorizeNet->expects($this->once())
            ->method('authorizeAndCapture')
            ->will($this->returnValue($response));

        $result = $payment->processPayment($authorizeNet, $paymentDetails);

        $this->assertTrue($result);
    }
}

-----

/project/root/

$ vendor/bin/phpunit	11 PASS ... 0 FAIL

##############################################################

(end)