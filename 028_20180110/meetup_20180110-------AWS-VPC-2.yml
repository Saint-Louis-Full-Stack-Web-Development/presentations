AWSTemplateFormatVersion: '2010-09-09'

Description: >
  The main description MUST be a literal string that is between 0 and 1024 bytes.

Metadata:
  Instances:
    Description: "Information about the instances"
  Databases:
    Description: "Information about the databases"

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: vpc-1

  myInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: igw-1

  myAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  RouteTablePUBLIC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: rt-public
  RouteTablePRIVATE:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: rt-private

  RoutePUBLIC:
    Type: AWS::EC2::Route
    DependsOn: myInternetGateway
    Properties:
      RouteTableId:
        Ref: RouteTablePUBLIC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway

  SubnetPUBLIC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.0/24
      # AvailabilityZone: "us-east-1a"
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: TRUE
      Tags:
      - Key: Name
        Value: sub-public
  SubnetPRIVATE:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.1.0/24
      # AvailabilityZone: "us-east-1a"
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: sub-private

  SubnetRouteTableAssociationPUBLIC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPUBLIC
      RouteTableId:
        Ref: RouteTablePUBLIC
  SubnetRouteTableAssociationPRIVATE:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPRIVATE
      RouteTableId:
        Ref: RouteTablePRIVATE

  NetworkAclPUBLIC:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: nacl-public
  NetworkAclPRIVATE:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value: nacl-private

  NetworkAclEntryPUBLICallowIn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPUBLIC
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: ALLOW
      Egress: FALSE
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryPUBLICallowOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPUBLIC
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: ALLOW
      Egress: TRUE
      CidrBlock: 0.0.0.0/0

  # NACL and SubNet Associations Here.......
  SubnetNetworkAclAssociationPUBLIC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPUBLIC
      NetworkAclId:
        Ref: NetworkAclPUBLIC

  SubnetNetworkAclAssociationPRIVATE:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPRIVATE
      NetworkAclId:
        Ref: NetworkAclPRIVATE


  SecurityGroupPUBLIC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-public

  SecurityGroupPRIVATE:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to private host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-private

Outputs:
  outmyVPC:
    Description: The ID of the VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  outSubnetPUBLIC:
    Description: The ID of the Public Subnet
    Value: !Ref SubnetPUBLIC
    Export:
      Name: !Sub "${AWS::StackName}-sub-publicID"
  outSecurityGroupPUBLIC:
    Description: The ID of the Security Group in the Public Subnet
    Value: !Ref SecurityGroupPUBLIC
    Export:
      Name: !Sub "${AWS::StackName}-sg-publicID"
